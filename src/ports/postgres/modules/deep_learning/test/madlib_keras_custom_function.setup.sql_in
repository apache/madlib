/* ---------------------------------------------------------------------*//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 ** ---------------------------------------------------------------------*/

---- utility for creating valid dill objects ----
CREATE OR REPLACE FUNCTION custom_function_object()
RETURNS BYTEA AS
$$
import dill
def test_sum_fn(a, b):
	return a+b

pb=dill.dumps(test_sum_fn)
return pb
$$ language plpython3u;

CREATE OR REPLACE FUNCTION read_custom_function(pb bytea, arg1 DOUBLE PRECISION, arg2 DOUBLE PRECISION)
RETURNS DOUBLE PRECISION AS
$$
import dill
obj=dill.loads(pb)
res=obj(arg1, arg2)
return res
$$ language plpython3u;

-- Custom loss function returns 0 as the loss
CREATE OR REPLACE FUNCTION custom_function_zero_object()
RETURNS BYTEA AS
$$
import dill
import tensorflow as tf

def focal_loss(y_true, y_pred):
  pt_1 = tf.where(tf.equal(y_true, 1), y_pred, tf.ones_like(y_pred))
  pt_0 = tf.where(tf.equal(y_true, 0), y_pred, tf.zeros_like(y_pred))
  custom_loss=(pt_1-pt_0)/10
  return custom_loss

pb=dill.dumps(focal_loss)
return pb
$$ language plpython3u;

CREATE OR REPLACE FUNCTION custom_function_one_object()
RETURNS BYTEA AS
$$
import dill
import tensorflow as tf

def focal_loss(y_true, y_pred):
  pt_1 = tf.where(tf.equal(y_true, 1), y_pred, tf.ones_like(y_pred))
  pt_0 = tf.where(tf.equal(y_true, 0), y_pred, tf.zeros_like(y_pred))
  custom_loss=(pt_1-pt_0)/10
  return custom_loss

pb=dill.dumps(focal_loss)
return pb
$$ language plpython3u;
