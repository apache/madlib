# coding=utf-8
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys
from os import path
import unittest
from mock import *

m4_changequote(`<!', `!>')

# Add modules to the pythonpath.
sys.path.append(path.join(path.dirname(path.abspath(__file__)), '../../..'))
sys.path.append(path.join(path.dirname(path.abspath(__file__)), '../..'))

class FormulaTestCase(unittest.TestCase):
    def setUp(self):
        self.plpy_mock = Mock()
        patches = {
            'plpy': self.plpy_mock
        }
        self.module_patcher = patch.dict('sys.modules', patches)
        self.module_patcher.start()
        from pmml import formula
        self.subject = formula
    def tearDown(self):
        self.module_patcher.stop()

    def test_formula_array_with_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1.0,foo,bar]', 3)
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0,foo,bar]', 3)
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0.0,foo,bar]', 3)
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1,"1","bar"]', 3)
        self.assertEqual(f.x, ['1', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1,"1.0","bar"]', 3)
        self.assertEqual(f.x, ['1.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1.0,"1","bar"]', 3)
        self.assertEqual(f.x, ['1', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1.0,"1.0","bar"]', 3)
        self.assertEqual(f.x, ['1.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1,"0","bar"]', 3)
        self.assertEqual(f.x, ['0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1.0,"0","bar"]', 3)
        self.assertEqual(f.x, ['0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1,"0.0","bar"]', 3)
        self.assertEqual(f.x, ['0.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1.0,"0.0","bar"]', 3)
        self.assertEqual(f.x, ['0.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0,"1","bar"]', 3)
        self.assertEqual(f.x, ['1', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0.0,"1","bar"]', 3)
        self.assertEqual(f.x, ['1', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0.0,"1.0","bar"]', 3)
        self.assertEqual(f.x, ['1.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0,"0","bar"]', 3)
        self.assertEqual(f.x, ['0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0.0,"0","bar"]', 3)
        self.assertEqual(f.x, ['0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0,"0.0","bar"]', 3)
        self.assertEqual(f.x, ['0.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[0.0,"0.0","bar"]', 3)
        self.assertEqual(f.x, ['0.0', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

    def test_formula_array_with_invalid_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[10,foo,bar]', 3)
        self.assertEqual(f.x, ['10', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        # A negative number shouldn't be allowed technically the train functions
        # don't error out, so adding this test for the sake of completeness
        f = self.subject.Formula('baaz', 'ARRAY[-2,foo,bar]', 3)
        self.assertEqual(f.intercept, True)
        self.assertEqual(f.x, ['ARRAY[-2,foo,bar][1]', 'ARRAY[-2,foo,bar][2]'])
        self.assertEqual(f.y, "baaz")

        f = self.subject.Formula('baaz', 'ARRAY[2,foo,bar]', 3)
        self.assertEqual(f.x, ['2', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        f = self.subject.Formula('baaz', 'ARRAY[23,foo,bar]', 3)
        self.assertEqual(f.x, ['23', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

    def test_formula_array_with_intercept_unequal_coef_len(self):
        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 2)
        self.assertEqual(f.x, ['x[1]', 'x[2]'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 4)
        self.assertEqual(f.x, ['x[1]', 'x[2]', 'x[3]', 'x[4]'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

    def test_formula_array_without_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        f = self.subject.Formula('baaz', 'ARRAY["1",foo,bar]', 3)
        self.assertEqual(f.x, ['1', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        f = self.subject.Formula('baaz', 'ARRAY["1", "foo","bar"]', 3)
        self.assertEqual(f.x, ['1', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        f = self.subject.Formula('baaz', 'ARRAY["0", "foo","bar"]', 3)
        self.assertEqual(f.x, ['0', 'foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

    def test_formula_array_without_intercept_unequal_coef_len(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 1)
        self.assertEqual(f.x, ['x[1]'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 3)
        self.assertEqual(f.x, ['x[1]', 'x[2]', 'x[3]'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, False)

    def test_formula_nonarray(self):
        f = self.subject.Formula('baaz', 'foo', 3)
        self.assertEqual(f.x, ['foo[1]', 'foo[2]'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(f.intercept, True)

        f = self.subject.Formula('baaz', '{1,foo,bar}', 3)
        self.assertEqual(f.intercept, True)
        self.assertEqual(f.x, ['x[1]', 'x[2]', 'x[3]'])
        self.assertEqual(f.y, "baaz")

    def test_rename_string_expression_with_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename('y ~ foo+bar')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename('y ~ foo,bar')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename('foo+bar')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename('foo,bar')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename('{foo,bar}')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

    def test_rename_string_expression_without_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename('y ~ x1+x2')
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename('y ~ x1,x2')
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename('x1+x2')
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename('x1,x2')
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename('{x1,x2}')
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

    def test_rename_string_expression_with_intercept_throws_warning(self):
        f = self.subject.Formula('baaz', 'ARRAY[1, foo,bar]', 3)
        f.rename('y ~ x1')
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(1, self.plpy_mock.warning.call_count)

    def test_rename_string_expression_without_intercept_throws_warning(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar,foobar]', 3)
        f.rename('y ~ x1+x2')
        self.assertEqual(f.x, ['foo', 'bar', 'foobar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(1, self.plpy_mock.warning.call_count)

    def test_rename_array_expression_with_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename(['x1','x2'])
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename(['y', 'x1','x2'])
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

    def test_rename_array_expression_without_intercept(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename(['x1','x2'])
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename(['y', 'x1','x2'])
        self.assertEqual(f.x, ['x1', 'x2'])
        self.assertEqual(f.y, "y")
        self.assertEqual(0, self.plpy_mock.warning.call_count)

    def test_rename_array_expression_with_intercept_throws_warning(self):
        f = self.subject.Formula('baaz', 'ARRAY[1,foo,bar]', 3)
        f.rename(['x1'])
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(1, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[1, foo,bar]', 3)
        f.rename(['x1', 'x2', 'x3','x4'])
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(2, self.plpy_mock.warning.call_count)

    def test_rename_array_expression_without_intercept_throws_warning(self):
        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename(['x1'])
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(1, self.plpy_mock.warning.call_count)

        f = self.subject.Formula('baaz', 'ARRAY[foo,bar]', 2)
        f.rename(['x1', 'x2', 'x3','x4'])
        self.assertEqual(f.x, ['foo', 'bar'])
        self.assertEqual(f.y, "baaz")
        self.assertEqual(2, self.plpy_mock.warning.call_count)


if __name__ == '__main__':
    unittest.main()

# ---------------------------------------------------------------------
