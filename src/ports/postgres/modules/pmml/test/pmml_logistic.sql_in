/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *//* ----------------------------------------------------------------------- */

 \i m4_regexp(MADLIB_LIBRARY_PATH, `\(.*\)/lib',
              `\1/../modules/pmml/test/pmml.setup.sql_in'
)

m4_changequote(`<!'', `!>'')

DROP TABLE IF EXISTS logregr_model, logregr_model_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model',
    '"Second_attack"',
    'ARRAY[1, "Treatment", trait_anxiety]',
    NULL,
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict(coef, ARRAY[1, "Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict_prob(coef, ARRAY[1, "Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true');

--- simple grouping -------
DROP TABLE IF EXISTS logregr_model_grouping, logregr_model_grouping_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model_grouping',
    '"Second_attack"',
    'ARRAY[1, "Treatment", trait_anxiety]',
    'g1',
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_predict(coef, ARRAY[1, "Treatment", trait_anxiety])
FROM logregr_model_grouping, "Patients" WHERE logregr_model_grouping.g1="Patients".g1;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction', 'g1');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_predict_prob(coef, ARRAY[1, "Treatment", trait_anxiety])
FROM logregr_model_grouping, "Patients" WHERE logregr_model_grouping.g1="Patients".g1;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true', 'g1');

--- complex grouping -------
DROP TABLE IF EXISTS logregr_model_grouping, logregr_model_grouping_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model_grouping',
    '"Second_attack"',
    'ARRAY[1, "Treatment", trait_anxiety]', -- test double quote
    'g1, g2',
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_model_grouping.g2, logregr_predict(coef, ARRAY[1, "Treatment", trait_anxiety]) FROM logregr_model_grouping, "Patients"
WHERE logregr_model_grouping.g1="Patients".g1 AND logregr_model_grouping.g2="Patients".g2;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction', 'g1,g2');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_model_grouping.g2, logregr_predict_prob(coef, ARRAY[1, "Treatment", trait_anxiety]) FROM logregr_model_grouping, "Patients"
WHERE logregr_model_grouping.g1="Patients".g1 AND logregr_model_grouping.g2="Patients".g2;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true', 'g1,g2');


--------------------------- without intercept ------------------------------
DROP TABLE IF EXISTS logregr_model, logregr_model_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model',
    '"Second_attack"',
    'ARRAY["Treatment", trait_anxiety]',
    NULL,
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict(coef, ARRAY["Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict_prob(coef, ARRAY["Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true');

--- simple grouping -------
DROP TABLE IF EXISTS logregr_model_grouping, logregr_model_grouping_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model_grouping',
    '"Second_attack"',
    'ARRAY["Treatment", trait_anxiety]',
    'g1',
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_predict(coef, ARRAY["Treatment", trait_anxiety])
FROM logregr_model_grouping, "Patients" WHERE logregr_model_grouping.g1="Patients".g1;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction', 'g1');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_predict_prob(coef, ARRAY["Treatment", trait_anxiety])
FROM logregr_model_grouping, "Patients" WHERE logregr_model_grouping.g1="Patients".g1;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true', 'g1');

--- complex grouping -------
DROP TABLE IF EXISTS logregr_model_grouping, logregr_model_grouping_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model_grouping',
    '"Second_attack"',
    'ARRAY["Treatment", trait_anxiety]', -- test double quote
    'g1, g2',
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_model_grouping.g2, logregr_predict(coef, ARRAY["Treatment", trait_anxiety]) FROM logregr_model_grouping, "Patients"
WHERE logregr_model_grouping.g1="Patients".g1 AND logregr_model_grouping.g2="Patients".g2;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction', 'g1,g2');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_model_grouping.g1, logregr_model_grouping.g2, logregr_predict_prob(coef, ARRAY["Treatment", trait_anxiety]) FROM logregr_model_grouping, "Patients"
WHERE logregr_model_grouping.g1="Patients".g1 AND logregr_model_grouping.g2="Patients".g2;
SELECT test_pmml_output('"Patients"', 'logregr_model_grouping', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true', 'g1,g2');

--- with 0 intercept ---------
DROP TABLE IF EXISTS logregr_model, logregr_model_summary;
SELECT logregr_train(
    '"Patients"',
    'logregr_model',
    '"Second_attack"',
    'ARRAY[0, "Treatment", trait_anxiety]',
    NULL,
    20,
    'irls'
);
DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict(coef, ARRAY[0, "Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict', 'predicted_Second_attack_pmml_prediction');

DROP TABLE IF EXISTS logregr_predict_output; CREATE TABLE logregr_predict_output as SELECT id, logregr_predict_prob(coef, ARRAY[0, "Treatment", trait_anxiety])
FROM logregr_model, "Patients";
SELECT test_pmml_output('"Patients"', 'logregr_model', 'logregr_predict_output', 'id', 'logregr_predict_prob', 'probability_true');
