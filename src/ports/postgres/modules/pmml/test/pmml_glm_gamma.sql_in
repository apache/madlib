\i m4_regexp(MADLIB_LIBRARY_PATH,
             `\(.*\)/lib',
              `\1/../modules/pmml/test/pmml.setup.sql_in'
)
\i m4_regexp(MADLIB_LIBRARY_PATH, `\(.*\)/lib',
              `\1/../modules/pmml/test/pmml.setup.datasets.sql_in'
)

m4_changequote(`<!', `!>'')

-------------------------------------------------- With intercept -------------------------------------------------------------------------
DROP TABLE IF EXISTS abalone_out_inverse, abalone_out_inverse_summary;
SELECT glm(
    'abalone',
    'abalone_out_inverse',
    'rings',
    'ARRAY[1, length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=inverse', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[1, length, diameter, height, whole, shucked, viscera, shell], 'inverse')
FROM abalone_out_inverse, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_inverse', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');


DROP TABLE IF EXISTS abalone_out_identity, abalone_out_identity_summary;
SELECT glm(
    'abalone',
    'abalone_out_identity',
    'rings',
    'ARRAY[1, length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=identity', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[1, length, diameter, height, whole, shucked, viscera, shell], 'identity')
FROM abalone_out_identity, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_identity', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');


DROP TABLE IF EXISTS abalone_out_log, abalone_out_log_summary;
SELECT glm(
    'abalone',
    'abalone_out_log',
    'rings',
    'ARRAY[1, length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=log', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[1, length, diameter, height, whole, shucked, viscera, shell], 'log')
FROM abalone_out_log, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_log', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');

-------------------------------------------------- Without intercept -------------------------------------------------------------------------
DROP TABLE IF EXISTS abalone_out_inverse_nointercept, abalone_out_inverse_nointercept_summary;
SELECT glm(
    'abalone',
    'abalone_out_inverse_nointercept',
    'rings',
    'ARRAY[length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=inverse', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[length, diameter, height, whole, shucked, viscera, shell], 'inverse')
FROM abalone_out_inverse_nointercept, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_inverse_nointercept', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');


DROP TABLE IF EXISTS abalone_out_identity_nointercept, abalone_out_identity_nointercept_summary;
SELECT glm(
    'abalone',
    'abalone_out_identity_nointercept',
    'rings',
    'ARRAY[length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=identity', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[length, diameter, height, whole, shucked, viscera, shell], 'identity')
FROM abalone_out_identity_nointercept, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_identity_nointercept', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');


DROP TABLE IF EXISTS abalone_out_log_nointercept, abalone_out_log_nointercept_summary;
SELECT glm(
    'abalone',
    'abalone_out_log_nointercept',
    'rings',
    'ARRAY[length, diameter, height, whole, shucked, viscera, shell]',
    'family=gamma, link=log', NULL, 'max_iter=1000, tolerance=1e-16'
);
DROP TABLE IF EXISTS glm_predict_gamma_out; CREATE TABLE glm_predict_gamma_out as SELECT id, glm_predict(coef, ARRAY[length, diameter, height, whole, shucked, viscera, shell], 'log')
FROM abalone_out_log_nointercept, abalone;
SELECT test_pmml_output('abalone', 'abalone_out_log_nointercept', 'glm_predict_gamma_out', 'id', 'glm_predict', 'predicted_rings_pmml_prediction');

-------------------------------------- Test pmml output ----------------------------------------------------------------

CREATE OR REPLACE FUNCTION count_expected_names(formula varchar, expected varchar[])
RETURNS bigint AS $$
    SELECT count(distinct result.name)
    FROM
        (SELECT text(unnest(xpath('/n:PMML/n:DataDictionary/n:DataField/@name',
                pmml_col, ARRAY[ARRAY['n', 'http://www.dmg.org/PMML-4_1']]))) AS name
        FROM (SELECT CASE WHEN $1 is NULL THEN pmml('abalone_out_inverse')
                          ELSE pmml('abalone_out_inverse', $1)
                     END AS pmml_col) abalone_out_inverse_pmml
        ) result,
        (SELECT unnest($2) AS name) expected
    WHERE expected.name = result.name;
$$ LANGUAGE sql;

CREATE OR REPLACE FUNCTION count_expected_names(name_spec varchar[], expected varchar[])
RETURNS bigint AS $$
    SELECT count(distinct result.name)
    FROM
        (SELECT text(unnest(xpath('/n:PMML/n:DataDictionary/n:DataField/@name',
                pmml_col, ARRAY[ARRAY['n', 'http://www.dmg.org/PMML-4_1']]))) AS name
        FROM (SELECT CASE WHEN $1 is NULL THEN pmml('abalone_out_inverse')
                          ELSE pmml('abalone_out_inverse', $1)
                     END AS pmml_col) abalone_out_inverse_pmml
        ) result,
        (SELECT unnest($2) AS name) expected
    WHERE expected.name = result.name;
$$ LANGUAGE sql;

SELECT assert(
    count_expected_names(
        NULL,
        ARRAY['rings_pmml_prediction', 'length', 'diameter', 'height', 'whole', 'shucked', 'viscera', 'shell']
    ) = 8,
    'default case');

SELECT assert(
    count_expected_names(
        'rings ~ length + diameter + height',
        ARRAY['rings', 'length', 'diameter', 'height']
    ) = 4,
    text(pmml('abalone_out_inverse',
              'rings ~ 1 + length + diameter + height')));

